import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve
from sklearn.model_selection 


import GridSearchCV, train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder
import numpy as np

# Load training and testing data
df_train = pd.read_excel('D:\\PNB PROJECT\\home_loan_analysis_dataset.xlsx')
df_test = pd.read_excel('D:\\PNB PROJECT\\home_loan_analysis_test_dataset.xlsx')

# Exploratory Data Analysis (EDA)
print("Missing values in training dataset:")
print(df_train.isnull().sum())
print("\nMissing values in testing dataset:")
print(df_test.isnull().sum())

# Descriptive statistics
print("\nDescriptive statistics of the training dataset:")
print(df_train.describe())

# Countplot for categorical variables
plt.figure(figsize=(10, 5))
sns.countplot(x='Age Group', data=df_train)
plt.title('Distribution of Age Group')
plt.show()
plt.figure(figsize=(10, 5))
sns.countplot(x='Salary Range', data=df_train)
plt.title('Distribution of Salary Range')
plt.show()

# Encode 'Loan Taken' as numeric in both datasets
df_train['Loan Taken'] = df_train['Loan Taken'].map({'Yes': 1, 'No': 0})
df_test['Loan Taken'] = df_test['Loan Taken'].map({'Yes': 1, 'No': 0})

# Map 'Salary Range' to numeric values
salary_map = {
    'Below ₹30,000': 1,
    '₹30,000-₹50,000': 2,
    '₹50,000-₹1,00,000': 3,
    'Above ₹1,00,000': 4
}
df_train['Salary Range Numeric'] = df_train['Salary Range'].map(salary_map)
df_test['Salary Range Numeric'] = df_test['Salary Range'].map(salary_map)


# Map 'Age Group' to numeric values
age_group_map = {
    'Below 30': 1,
    '31-40': 2,
    '41-50': 3,
    '51-60': 4
}
df_train['Age Group Numeric'] = df_train['Age Group'].map(age_group_map)
df_test['Age Group Numeric'] = df_test['Age Group'].map(age_group_map)

# Check if any mapping results in NaNs
print("\nMissing values after mapping:")
print(df_train[['Age Group Numeric', 'Salary Range Numeric']].isnull().sum())
print(df_test[['Age Group Numeric', 'Salary Range Numeric']].isnull().sum())

# Create a LabelEncoder for Gender and Employment Type
label_encoder_gender = LabelEncoder()
label_encoder_employment = LabelEncoder()

# Fit on the training data
label_encoder_gender.fit(df_train['Gender'])
label_encoder_employment.fit(df_train['Employment Type'])

# Transform both train and test data
df_train['Gender'] = label_encoder_gender.transform(df_train['Gender'])
df_train['Employment Type'] = label_encoder_employment.transform(df_train['Employment Type'])
df_test['Gender'] = label_encoder_gender.transform(df_test['Gender'])
df_test['Employment Type'] = label_encoder_employment.transform(df_test['Employment Type'])

# Check if encoding results in any issues
print("\nMissing values after encoding:")
print(df_train[['Gender', 'Employment Type']].isnull().sum())
print(df_test[['Gender', 'Employment Type']].isnull().sum())

# Include Age Group Numeric and Salary Range Numeric in features
X_train = df_train[['Age Group Numeric', 'Gender', 'Employment Type', 'Salary Range Numeric']]
y_train = df_train['Loan Taken']


X_test = df_test[['Age Group Numeric', 'Gender', 'Employment Type', 'Salary Range Numeric']]
y_test = df_test['Loan Taken']

# Split training data for cross-validation
X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Hyperparameter tuning using GridSearchCV
param_grid = {
    'n_estimators': [100, 200, 500],
    'max_depth': [10, 20, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}
grid_search = GridSearchCV(estimator=RandomForestClassifier(random_state=42),
                           param_grid=param_grid,
                           cv=5,
                           n_jobs=-1,
                           verbose=2)
grid_search.fit(X_train_split, y_train_split)

# Best parameters found by GridSearch
best_params = grid_search.best_params_
print(f"Best parameters found: {best_params}")

# Train Random Forest model with tuned parameters
model = RandomForestClassifier(**best_params, random_state=42)
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate the model
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(f"Classification Report:\n{classification_report(y_test, y_pred)}")

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# ROC-AUC curve
y_pred_proba = model.predict_proba(X_test)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
roc_auc = roc_auc_score(y_test, y_pred_proba)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f"ROC curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], 'k--', label="Random guess")
plt.title("ROC-AUC Curve")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.legend(loc="best")
plt.show()

# Feature Importance
feature_importances = model.feature_importances_
sorted_idx = np.argsort(feature_importances)[::-1]
plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importances[sorted_idx], y=X_train.columns[sorted_idx], palette='viridis')
plt.title("Feature Importance")
plt.show()

# Cross-validation
cv_scores = cross_val_score(model, X_train, y_train, cv=5)
print(f"Cross-validation scores: {cv_scores}")
print(f"Mean CV Accuracy: {cv_scores.mean()}")

# Recommendation System
def recommend_loan(customer_data, model):
    prediction = model.predict(customer_data)
    
    if prediction == 1:
        salary = customer_data['Salary Range Numeric'].values[0]
        employment_type = customer_data['Employment Type'].values[0]

       if salary >= 3:  # Above ₹50,000
            loan_amount = "High loan amount (above ₹10 lakhs)"
        elif salary == 2:  # ₹30,000-₹50,000
            loan_amount = "Medium loan amount (₹5-10 lakhs)"
        else:
            loan_amount = "Low loan amount (below ₹5 lakhs)"
        
        if employment_type == 1:  # 'Salaried'
            interest_rate = "7% fixed interest rate"
        else:
 
           interest_rate = "8% floating interest rate"
        
        return f"Loan Recommended! Suggested terms: {loan_amount} at {interest_rate}."
    else:
        return "No loan recommended for this customer."


# Example usage of Recommendation System
new_customer = pd.DataFrame({
    'Age Group Numeric': [2],  # Input the customer age group (encoded)
    'Gender': [0],     # Input gender (encoded)
    'Employment Type': [1],  # Employment type (encoded)
    'Salary Range Numeric': [2]  # Salary range (encoded)
})


# Get recommendation for the new customer
print(recommend_loan(new_customer, model))
